// Generated by odin2 (version 0.3.5) - do not edit
#include <dust2/common.hpp>
// [[dust2::class(packmalaria)]]
// [[dust2::time_type(continuous)]]
// [[dust2::parameter(N, type = "real_type", rank = 0, required = FALSE, constant = FALSE)]]
// [[dust2::parameter(I0, type = "real_type", rank = 0, required = FALSE, constant = FALSE)]]
// [[dust2::parameter(beta, type = "real_type", rank = 0, required = FALSE, constant = FALSE)]]
// [[dust2::parameter(gamma, type = "real_type", rank = 0, required = FALSE, constant = FALSE)]]
class packmalaria {
public:
  packmalaria() = delete;
  using real_type = double;
  using rng_state_type = monty::random::generator<real_type>;
  struct shared_state {
    struct offset_type {
      struct {
        size_t S;
        size_t I;
        size_t R;
      } state;
    } offset;
    real_type N;
    real_type I0;
    real_type beta;
    real_type gamma;
  };
  struct internal_state {};
  using data_type = dust2::no_data;
  static dust2::packing packing_state(const shared_state& shared) {
    return dust2::packing{
      {"S", {}},
      {"I", {}},
      {"R", {}}
    };
  }
  static dust2::packing packing_gradient(const shared_state& shared) {
    return dust2::packing{
    };
  }
  static shared_state build_shared(cpp11::list parameters) {
    const real_type N = dust2::r::read_real(parameters, "N", 1000);
    const real_type I0 = dust2::r::read_real(parameters, "I0", 10);
    const real_type beta = dust2::r::read_real(parameters, "beta", static_cast<real_type>(0.20000000000000001));
    const real_type gamma = dust2::r::read_real(parameters, "gamma", static_cast<real_type>(0.10000000000000001));
    shared_state::offset_type offset;
    offset.state.S = 0;
    offset.state.I = 1;
    offset.state.R = 2;
    return shared_state{offset, N, I0, beta, gamma};
  }
  static internal_state build_internal(const shared_state& shared) {
    return internal_state{};
  }
  static void update_shared(cpp11::list parameters, shared_state& shared) {
    shared.N = dust2::r::read_real(parameters, "N", shared.N);
    shared.I0 = dust2::r::read_real(parameters, "I0", shared.I0);
    shared.beta = dust2::r::read_real(parameters, "beta", shared.beta);
    shared.gamma = dust2::r::read_real(parameters, "gamma", shared.gamma);
  }
  static void update_internal(const shared_state& shared, internal_state& internal) {
  }
  static void initial(real_type time, const shared_state& shared, internal_state& internal, rng_state_type& rng_state, real_type* state) {
    state[0] = shared.N - shared.I0;
    state[1] = shared.I0;
    state[2] = 0;
  }
  static void rhs(real_type time, const real_type* state, const shared_state& shared, internal_state& internal, real_type* state_deriv) {
    const auto S = state[0];
    const auto I = state[1];
    state_deriv[0] = -shared.beta * S * I / shared.N;
    state_deriv[1] = shared.beta * S * I / shared.N - shared.gamma * I;
    state_deriv[2] = shared.gamma * I;
  }
  static auto zero_every(const shared_state& shared) {
    return dust2::zero_every_type<real_type>();
  }
};
